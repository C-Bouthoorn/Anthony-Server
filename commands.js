// Generated by CoffeeScript 1.10.0
var doCommands, util;

util = require('util');

doCommands = function(message, user, socket) {
  var args, command, firstspace, noperms, targetname, tasks;
  if (!message.startsWith('/')) {
    return [];
  }
  firstspace = message.search(/\s|$/);
  command = message.substring(0, firstspace);
  args = message.substring(firstspace + 1).split(' ');
  tasks = [];
  noperms = function() {
    return socket.emit('client-receive-message', {
      user: SERVER_USER,
      message: "You don't have the right permissions to use this command!"
    });
  };
  if (command === '/fur') {
    tasks.push([
      [util.inspect(args)], function(args) {
        var color;
        var color;
        color = args[0];
        return console.log("Set fur color " + color + " for " + user.name);
      }
    ]);
  } else if (command === '/mane') {
    tasks.push([
      [util.inspect(args)], function(args) {
        var color;
        var color;
        color = args[0];
        return console.log("Set mane color " + color + " for " + user.name);
      }
    ]);
  } else if (command === '/tailstyle') {
    tasks.push([
      [util.inspect(args)], function(args) {
        var style;
        var style;
        style = args[0];
        return console.log("Set tail style " + style + " for " + user.name);
      }
    ]);
  } else if (command === '/manestyle') {
    tasks.push([
      [util.inspect(args)], function(args) {
        var style;
        var style;
        style = args[0];
        return console.log("Set mane style " + style + " for " + user.name);
      }
    ]);
  } else if (command === '/fullstyle') {
    tasks.push([
      [util.inspect(args)], function(args) {
        var style;
        var style;
        style = args[0];
        return console.log("Set style " + style + " for " + user.name);
      }
    ]);
  } else if (command === '/spawn') {
    tasks.push([
      [util.inspect(args)], function(args) {
        return console.log("Spawn " + user.name);
      }
    ]);
  } else if (command === '/sethome') {
    tasks.push([
      [util.inspect(args)], function(args) {
        return console.log("Set home for " + user.name);
      }
    ]);
  } else if (command === '/home') {
    tasks.push([
      [util.inspect(args)], function(args) {
        return console.log("Teleport to home for " + user.name);
      }
    ]);
  } else if (command === '/teleport') {
    tasks.push([
      [util.inspect(args)], function(args) {
        var name;
        var name;
        name = args[0];
        return console.log("Teleport " + user.name + " to " + name);
      }
    ]);
  } else if (command === '/tag') {
    tasks.push([
      [util.inspect(args)], function(args) {
        var tag;
        var tag;
        tag = args[0];
        return console.log("Let " + user.name + " join " + tag);
      }
    ]);
  } else if (command === '/create') {
    tasks.push([
      [util.inspect(args)], function(args) {
        var name;
        var name;
        name = args[0];
        return console.log("Create channel " + name + " for " + user.name);
      }
    ]);
  } else if (command === '/join') {
    tasks.push([
      [util.inspect(args)], function(args) {
        var name;
        var name;
        name = args[0];
        return console.log("Join channel " + name + " " + user.name);
      }
    ]);
  } else if (command === '/leave') {
    tasks.push([
      [util.inspect(args)], function(args) {
        var name;
        var name;
        name = args[0];
        return console.log("Leave channel " + name + " " + user.name);
      }
    ]);
  } else if (command === '/report') {
    tasks.push([
      [util.inspect(args)], function(args) {
        var name, reason;
        var name, reason;
        name = args[0];
        reason = args.splice(1).join(' ');
        return console.log("[ REPORT ] " + user.name + " reported " + name + " for: " + reason);
      }
    ]);
  } else if (command === '/rules') {
    tasks.push(function() {
      return socket.emit('client-receive-message', {
        user: SERVER_USER,
        message: "The rules are:\n1. Don't swear\n2. Don't swear\n3. Don't fucking swear\n4. Only admins can swear\n5. But don't swear\n6. Please\n7. Oh, and follow the rules".replace(/\n/g, '<br>')
      });
    });
  } else if (command === '/help') {
    tasks.push(function() {
      return socket.emit('client-receive-message', {
        user: SERVER_USER,
        message: "<b>/fur [color]:</b>\nChanges your fur to indicated color. e.g. /fur red or /fur #ff0000\n<b>/mane [color]:</b>\nChanges your mane to indicated color.\n<b>/tailstyle [style]:</b>\nChanges your tail to indicated style. e.g. /tailstyle derpy or /tailstyle applejack\n<b>/manestyle [style]:</b>\nChanges your mane to indicated style.\n<b>/fullstyle [style]:</b>\nChanges your mane and tail to indicated style.\n<b>/online:</b>\nShows you who is online.\n<b>/spawn:</b>\nTeleports you to the spawn.\n<b>/sethome:</b>\nSets your private spawn point to your current location.\n<b>/home:</b>\nTeleports you to your private spawn point.\n<b>/tag:</b>\nJoin/leave the tag.\n<b>/rules:</b>\nDisplays the rules.\n<b>/create [name]:</b>\nCreates a chatchannel.\n<b>/join [name]:</b>\nJoins a chatchannel.\n<b>/leave [name]:</b>\nLeaves a chatchannel. (You cannot leave certain default channels)\n<b>/teleport [name]:</b>\nTeleports you to a player.\n<b>/report [name] [reason]:</b>\nReport a player. Troll reports will be punished!".replace(/\n/g, '<br>')
      });
    });
  } else if (command === '/online') {
    tasks.push(function() {
      var _, s, u, users;
      users = [];
      for (_ in sessions) {
        s = sessions[_];
        if (s.user !== void 0) {
          users.push(s.user);
        }
      }
      users.sort(function(a, b) {
        var typea, typeb;
        typea = a.type;
        typeb = b.type;
        if (typea === typeb) {
          if (a.id > b.id) {
            return 1;
          } else {
            return -1;
          }
        } else if ((typea === "admin") || (typea === "mod" && typeb === "")) {
          return 1;
        } else {
          return -1;
        }
      });
      return socket.emit('client-receive-message', {
        user: SERVER_USER,
        message: "Users online(" + users.length + "): " + (((function() {
          var i, len, results;
          results = [];
          for (i = 0, len = users.length; i < len; i++) {
            u = users[i];
            results.push(u.name);
          }
          return results;
        })()).join(", "))
      });
    });
  } else if (command === '/kick') {
    targetname = args[0];
    if ((user.type === "server") || (user.name === targetname)) {
      tasks.push([
        [util.inspect(args)], function(args) {
          var targetname;
          var results, ses, sesid, targetsock;
          targetname = args[0];
          results = [];
          for (sesid in sessions) {
            ses = sessions[sesid];
            if (ses.user === void 0) {
              continue;
            }
            if (ses.user.name === targetname) {
              targetsock = ses.socket;
              targetsock.emit('client-receive-message', {
                user: SERVER_USER,
                message: "<script>location.href+='';</script>"
              });
              break;
            } else {
              results.push(void 0);
            }
          }
          return results;
        }
      ]);
    } else {
      tasks.push(noperms);
    }
  }
  return tasks;
};

module.exports = doCommands;
