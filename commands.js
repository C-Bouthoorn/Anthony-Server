// Generated by CoffeeScript 1.10.0
var addTask, doCommands, util;

util = require('util');

this.tasks = [];

this.args = [];

addTask = function(func) {
  return this.tasks.push([[util.inspect(this.args)], func]);
};

doCommands = function(message, user, socket) {
  var command, firstspace, noperms, targetname;
  if (!message.startsWith('/')) {
    return [];
  }
  this.tasks = [];
  firstspace = message.search(/\s|$/);
  command = message.substring(0, firstspace);
  this.args = message.substring(firstspace + 1).split(' ');
  noperms = function() {
    return sendServerMessageTo(socket, "You don't have the right permissions to use this command!");
  };
  switch (command) {
    case '/debug':
      addTask(function(args) {
        var color, type;
        type = args[0];
        color = args[1];
        return createTexture(type, color);
      });
      break;
    case '/fur':
      addTask(function(args) {
        var color;
        color = args[0];
        return console.log("[PONY_CMD]".c_CHAT + (" Set fur color " + color + " for user " + user.name));
      });
      break;
    case '/mane':
      addTask(function(args) {
        var color;
        color = args[0];
        return console.log("[PONY_CMD]".c_CHAT + (" Set mane color " + color + " for user " + user.name));
      });
      break;
    case '/tailstyle':
      addTask(function(args) {
        var style;
        style = args[0];
        return console.log("[PONY_CMD]".c_CHAT + (" Set tail style " + style + " for user " + user.name));
      });
      break;
    case '/manestyle':
      addTask(function(args) {
        var style;
        style = args[0];
        return console.log("[PONY_CMD]".c_CHAT + (" Set mane style " + style + " for user " + user.name));
      });
      break;
    case '/fullstyle':
      addTask(function(args) {
        var style;
        style = args[0];
        return console.log("[PONY_CMD]".c_CHAT + (" Set style " + style + " for user " + user.name));
      });
      break;
    case '/spawn':
      addTask(function(args) {
        return console.log("[PONY_CMD]".c_CHAT + (" User " + user.name + " teleported to spawn"));
      });
      break;
    case '/sethome':
      addTask(function(args) {
        return console.log("[PONY_CMD]".c_CHAT + (" Set home for user " + user.name));
      });
      break;
    case '/home':
      addTask(function(args) {
        return console.log("[PONY_CMD]".c_CHAT + (" User " + user.name + " teleported to home"));
      });
      break;
    case '/teleport':
      addTask(function(args) {
        var name;
        name = args[0];
        return console.log("[PONY_CMD]".c_CHAT + (" User " + user.name + " teleported to " + name));
      });
      break;
    case '/create':
      addTask(function(args) {
        var name, qq, regex;
        name = args[0];
        regex = /^[a-zA-Z0-9_]{2,64}$/;
        if (!regex.test(name)) {
          console.log("[  CHNL  ]".c_ERR + " Channel doesn't match requirements");
          sendServerMessageTo(socket, "Channel name doesn't match requirements");
          return;
        }
        console.log("[  CHNL  ]".c_OK + (" Create channel " + name + " for user " + user.name));
        if (channels.includes(name)) {
          console.log("[  CHNL  ]".c_ERR + " Channel already exists!");
          sendServerMessageTo(socket, "Channel already exists! Use <b>/join " + name + "</b> to join it");
          return;
        }
        channels[name] = [];
        user.channel_perms.push(name);
        if (db === void 0) {
          console.log("[  CHNL  ]".c_ERR + " DATABASE UNDEFINED!");
          return;
        }
        qq = "UPDATE " + USER_TABLE + " SET channel_perms=" + (db.escape(user.channel_perms.join(';'))) + " WHERE id=" + user.id + ";";
        db.query(qq, function(err, data) {
          if (err) {
            throw err;
          }
        });
        qq = "INSERT INTO " + CHANNELS_TABLE + " (name) VALUES (" + (db.escape(name)) + ");";
        db.query(qq, function(err, data) {
          if (err) {
            throw err;
          }
        });
        console.log("[  CHNL  ]".c_OK + (" Channel " + name + " created"));
        return sendServerMessageTo(socket, "Channel created. Use <b>/join " + name + "</b> to join it");
      });
      break;
    case '/join':
      addTask(function(args) {
        var name;
        var name, qq;
        name = args[0];
        if (!user.channel_perms.includes(name)) {
          console.log("[  CHNL  ]".c_ERR + (" User " + user.name + " doesn't have permission to join channel " + name + "!"));
          sendServerMessageTo(socket, "You don't have permission to join this channel");
          return;
        }
        if (channels[name] == null) {
          console.log("[  CHNL  ]".c_ERR + (" Channel " + name + " doesn't exist!"));
          sendServerMessageTo(socket, "That channel doesn't exist");
          return;
        }
        user.channels.push(name);
        if (!channels[name].includes(user.id)) {
          channels[name].push(user.id);
        }
        if (db === void 0) {
          console.log("[  CHNL  ]".c_ERR + " DATABASE UNDEFINED!");
          return;
        }
        qq = "UPDATE " + CHANNELS_TABLE + " SET joined=" + (db.escape(channels[name].join(';'))) + ";";
        db.query(qq, function(err, data) {
          if (err) {
            throw err;
          }
        });
        console.log("[  CHNL  ]".c_OK + (" User " + user.name + " joined channel " + name));
        sendServerMessageTo(socket, "Joined channel");
        return socket.emit('setchannels', {
          channels: user.channels
        });
      });
      break;
    case '/invite':
      addTask(function(args) {
        var name, username;
        username = args[0];
        return name = args[1];
      });
      break;
    case '/leave':
      addTask(function(args) {
        var name, qq;
        name = args[0];
        console.log("[  CHNL  ]".c_ERR + (" user " + user.name + " leaves channel " + name));
        if (name === 'general') {
          sendServerMessageTo(socket, "One can't leave the general channel");
          return;
        }
        if (!user.channels.includes(name)) {
          console.log("[  CHNL  ]".c_ERR + (" User " + user.name + " isn't in channel " + name + "!"));
          sendServerMessageTo(socket, "You are not in that channel");
          return;
        }
        user.channels.remove(name);
        channels[name].remove(user.id);
        if (db === void 0) {
          console.log("[  CHNL  ]".c_ERR + " DATABASE UNDEFINED!");
          return;
        }
        qq = "UPDATE " + CHANNELS_TABLE + " SET joined=" + (db.escape(channels[name].join(';'))) + ";";
        db.query(qq, function(err, data) {
          if (err) {
            throw err;
          }
        });
        socket.emit('setchannels', {
          channels: user.channels
        });
        return sendServerMessageTo(socket, "Succesfully left channel!");
      });
      break;
    case '/tag':
      addTask(function(args) {
        var tag;
        var tag;
        tag = args[0];
        return console.log("[MINIGAME]".black.bgMagenta + ("user " + user.name + " joined the tag!"));
      });
      break;
    case '/report':
      addTask(function(args) {
        var name, reason;
        var name, reason;
        name = args[0];
        reason = args.splice(1).join(' ');
        console.log("[ REPORT ]".red.bgWhite + " User " + ("" + user.name).underline + " reported " + ("" + name).underline + " for " + ("" + reason));
        return sendServerMessageTo(socket, "Thank you for reporting! We will look into it. Note, however, that false reports might result in a ban!");
      });
      break;
    case '/rules':
      addTask(function() {
        return socket.emit('client-receive-message', {
          user: SERVER_USER,
          message: "The rules are:\n1. Don't swear\n2. Don't swear\n3. Don't fucking swear\n4. Only admins can swear\n5. But don't swear\n6. Please\n7. Oh, and follow the rules".replace(/\n/g, '<br>')
        });
      });
      break;
    case '/help':
      addTask(function() {
        return socket.emit('client-receive-message', {
          user: SERVER_USER,
          message: "<b>/fur [color]:</b>\nChanges your fur to indicated color. e.g. /fur red or /fur #ff0000\n<b>/mane [color]:</b>\nChanges your mane to indicated color.\n<b>/tailstyle [style]:</b>\nChanges your tail to indicated style. e.g. /tailstyle derpy or /tailstyle applejack\n<b>/manestyle [style]:</b>\nChanges your mane to indicated style.\n<b>/fullstyle [style]:</b>\nChanges your mane and tail to indicated style.\n<b>/online:</b>\nShows you who is online.\n<b>/spawn:</b>\nTeleports you to the spawn.\n<b>/sethome:</b>\nSets your private spawn point to your current location.\n<b>/home:</b>\nTeleports you to your private spawn point.\n<b>/tag:</b>\nJoin/leave the tag.\n<b>/rules:</b>\nDisplays the rules.\n<b>/create [name]:</b>\nCreates a chatchannel.\n<b>/join [name]:</b>\nJoins a chatchannel.\n<b>/leave [name]:</b>\nLeaves a chatchannel. (You cannot leave certain default channels)\n<b>/teleport [name]:</b>\nTeleports you to a player.\n<b>/report [name] [reason]:</b>\nReport a player. Troll reports will be punished!".replace(/\n/g, '<br>')
        });
      });
      break;
    case '/online':
      addTask(function() {
        var _, s, u, users;
        users = [];
        for (_ in sessions) {
          s = sessions[_];
          if (s.user !== void 0) {
            users.push(s.user);
          }
        }
        users.sort(function(a, b) {
          var typea, typeb;
          typea = a.type;
          typeb = b.type;
          if (typea === typeb) {
            if (a.id > b.id) {
              return 1;
            } else {
              return -1;
            }
          } else if ((typea === "admin") || (typea === "mod" && typeb === "normal")) {
            return 1;
          } else {
            return -1;
          }
        });
        return sendServerMessageTo(socket, "Users online(" + users.length + "): " + (((function() {
          var i, len, results;
          results = [];
          for (i = 0, len = users.length; i < len; i++) {
            u = users[i];
            results.push(u.name);
          }
          return results;
        })()).join(", ")));
      });
      break;
    case '/kick':
      targetname = args[0];
      if ((user.type === "server") || (user.name === targetname)) {
        addTask(function(args) {
          var targetname;
          var results, ses, sesid, targetsock;
          targetname = args[0];
          results = [];
          for (sesid in sessions) {
            ses = sessions[sesid];
            if (ses.user === void 0) {
              continue;
            }
            if (ses.user.name === targetname) {
              targetsock = ses.socket;
              targetsock.emit('client-receive-message', {
                user: SERVER_USER,
                message: "<script>removeUsernameCookie();location.href+='';</script>"
              });
              break;
            } else {
              results.push(void 0);
            }
          }
          return results;
        });
      } else {
        addTask(noperms);
      }
  }
  return tasks;
};

module.exports = doCommands;
