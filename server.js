// Generated by CoffeeScript 1.10.0
/*jshint node: true*///;
'use strict';
var Base64, FILES, PORT, SERVER_USER, USER_TABLE, WWW_ROOT, app, db, fs, http, io, mysql, postlogin, salthash, sendMessage, sessionid_by_socketid, sessions, sockets, util,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

app = require('express')();

http = require('http').Server(app);

io = require('socket.io')(http);

mysql = require('mysql');

salthash = require('password-hash-and-salt');

fs = require('fs');

util = require('util');

Base64 = {
  encode: function(x) {
    return new Buffer(x).toString('base64');
  },
  decode: function(x) {
    return new Buffer(x, 'base64').toString('utf8');
  }
};

PORT = 3000;

db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'root',
  database: 'chat_dev'
});

USER_TABLE = 'users_dev';

db.connect();

Object.prototype.map = function(callback) {
  var k, results, v;
  results = [];
  for (k in this) {
    if (Object.hasOwnProperty.call(this, k)) {
      v = this[k];
      results.push(callback(k, v));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

FILES = {
  root: ['/index.js', '/index.css', '/index.html', '/login.html', '/register.html'],
  redir: {
    '/': '/index.html',
    '/login': '/login.html',
    '/register': '/register.html'
  }
};

WWW_ROOT = __dirname + "/www";

FILES.root.map(function(file) {
  return app.get(file, function(req, res) {
    return res.sendFile(WWW_ROOT + file);
  });
});

FILES.redir.map(function(file, dest) {
  return app.get(file, function(req, res) {
    return res.sendFile(WWW_ROOT + dest);
  });
});

sockets = {};

sessions = {};

sessionid_by_socketid = {};

SERVER_USER = {
  name: 'SERVER',
  type: 'server'
};

sendMessage = function(user, message) {
  var i, len, ref, results, s, socketid;
  ref = Object.keys(sockets);
  results = [];
  for (i = 0, len = ref.length; i < len; i++) {
    socketid = ref[i];
    s = sockets[socketid];
    console.log("Send message to socket ID '" + socketid + "' (user '" + sessions[sessionid_by_socketid[socketid]].user.name + "')!");
    results.push(s.emit('client-receive-message', {
      user: user,
      message: message
    }));
  }
  return results;
};

postlogin = function(socket, user) {
  var sessionid, socketid;
  socketid = socket.conn.id;
  sessionid = '';
  while (sessionid === '' || sessions[sessionid] !== void 0) {
    sessionid = Base64.encode("" + (Math.random() * 1e10));
  }
  console.log("Created sessionid '" + sessionid + "' for user '" + user.name + "'");
  sessions[sessionid] = {
    user: user
  };
  socket.emit('setid', {
    sessionid: sessionid
  });
  if (!(indexOf.call(sockets, socketid) >= 0)) {
    sockets[socketid] = socket;
  }
  sessionid_by_socketid[socketid] = sessionid;
  socket.on('get-chat-data', function() {
    return fs.readFile(WWW_ROOT + "/chatbox.html", function(err, data) {
      if (err) {
        data = "<h4 class='error'>Failed to get chatbox data</h4>";
      }
      data = '' + data;
      socket.emit('chat-data', {
        html: data
      });
      return sendMessage(SERVER_USER, "<span class='user " + user.type + "'>" + user.name + "</span> joined the game.");
    });
  });
  return socket.emit('login-complete', {});
};

io.sockets.on('connection', function(socket) {
  var ip, socketid;
  ip = socket.client.conn.remoteAddress;
  socketid = socket.conn.id;
  if (ip.startsWith("::ffff:")) {
    ip = ip.substring("::ffff:".length);
  }
  if (ip === "127.0.0.1") {
    ip = "localhost";
  }
  console.log("Client connected from '" + ip + "' with socket ID '" + socketid + "'");
  socket.on('register', function(data) {
    if (data === void 0) {
      console.log("No data received");
      socket.emit('register-failed', {
        error: "No data received"
      });
      return;
    }
    return (function(data) {
      var password, qq, regex, username;
      username = data.username;
      password = data.password;
      if (username === void 0 || password === void 0) {
        console.log("Username or password undefined");
        socket.emit('register-failed', {
          error: "Username or password undefined"
        });
        return;
      }
      regex = /[a-zA-Z0-9_]{2,64}/;
      if (!regex.test(username && regex.test(password))) {
        console.log("Username or password doesn't match requirements!");
        socket.emit('register-failed', {
          error: "Username or password doesn't match requirements!"
        });
        return;
      }
      console.log("Registration request received for user '" + username + "'");
      qq = "SELECT id FROM " + USER_TABLE + " WHERE username = " + (db.escape(username));
      return db.query(qq, function(err, data) {
        if (data.length > 0) {
          console.log("User '" + username + "' already exists");
          socket.emit('register-failed', {
            error: "Username already exists"
          });
          return;
        }
        return salthash(password).hash(function(err, hash) {
          if (err) {
            throw err;
          }
          qq = "INSERT INTO " + USER_TABLE + " (username, password) VALUES (" + (db.escape(username)) + ", " + (db.escape(hash)) + ")";
          return db.query(qq, function(err, data) {
            if (err) {
              throw err;
            }
            console.log("Registration for user '" + username + "' done");
            return socket.emit('register-complete', {});
          });
        });
      });
    })(data);
  });
  socket.on('login', function(data) {
    if (data === void 0) {
      console.log("No data received");
      socket.emit('login-failed', {
        error: "No data received"
      });
      return;
    }
    return (function(data) {
      var password, qq, username;
      username = data.username;
      password = data.password;
      if (username === void 0 || password === void 0) {
        console.log("Username or password undefined!");
        socket.emit('login-failed', {
          error: "Username or password undefined"
        });
        return;
      }
      console.log("Login request received for user '" + username + "'");
      qq = "SELECT password, channel_perms, type FROM " + USER_TABLE + " WHERE username = " + (db.escape(username));
      return db.query(qq, function(err, data) {
        var hash;
        if (err) {
          throw err;
        }
        if (data.length < 1) {
          console.log("User '" + username + "' not found");
          socket.emit('login-failed', {
            error: "Username or password incorrect!"
          });
          return;
        }
        hash = data[0].password;
        return salthash(password).verifyAgainst(hash, function(err, verified) {
          var channel_perms, usertype;
          if (err) {
            throw err;
          }
          if (!verified) {
            console.log("User '" + username + "' failed to login - hashes don't match");
            socket.emit('login-failed', {
              error: "Username or password incorrect!"
            });
            return;
          }
          console.log("User '" + username + "' succesfully logged in");
          channel_perms = data[0].channel_perms;
          usertype = data[0].type;
          if (usertype === '') {
            usertype = 'normal';
          }
          return postlogin(socket, {
            name: username,
            channel_perms: channel_perms,
            type: usertype
          });
        });
      });
    })(data);
  });
  socket.on('client-send-message', function(data) {
    var message, sessionid, user;
    if (data === void 0) {
      console.log("No data received");
      return;
    }
    message = data.message;
    if (message === void 0) {
      console.log("No message received");
      return;
    }
    sessionid = data.sessionid;
    if (sessionid === void 0) {
      console.log("No session ID received");
      return;
    }
    if (sessions[sessionid] === void 0) {
      console.log("Session ID '" + data.sessionid + "' not found in sessions");
      return;
    }
    user = sessions[sessionid].user;
    if (user === void 0) {
      console.log("Session ID " + data.sessionid + " exists, but no user is associated with it?");
      return;
    }
    console.log("Got message '" + message + "' from user '" + user.name + "'");
    return sendMessage(user, message);
  });
  return socket.on('disconnect', function() {
    var sessionid, user;
    socketid = socket.conn.id;
    sessionid = sessionid_by_socketid[socketid];
    if (sessionid !== void 0) {
      user = sessions[sessionid].user;
      console.log(user.name + " left the game.");
      sendMessage(SERVER_USER, "<span class='user " + user.type + "'>" + user.name + "</span> left the game.");
    } else {
      console.log("Non-logged-in client with socket ID '" + socketid + "' has disconnected");
    }
    if (sockets[socketid] !== void 0) {
      return delete sockets[socketid];
    }
  });
});

http.listen(PORT, function() {
  return console.log("Server started on port " + PORT + "!");
});
