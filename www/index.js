// Generated by CoffeeScript 1.10.0
/*jshint jquery: true*///;
/*globals io:false, console:false, Cookies:false *///;
'use strict';
var checkPass, escapeRegex, getUsernameCookie, init, initchat, login, logout, parseMessage, register, removeUsernameCookie, safe, sessionid, setUsernameCookie, setstatus, socket;

socket = null;

sessionid = null;

setUsernameCookie = function(username) {
  if (Cookies === void 0) {
    return void 0;
  }
  if ($('#remember').is(':checked')) {
    return Cookies.set('username', username);
  }
};

getUsernameCookie = function() {
  if (Cookies === void 0) {
    return void 0;
  }
  return Cookies.get('username');
};

removeUsernameCookie = function() {
  if (Cookies === void 0) {
    return void 0;
  }
  return Cookies.remove('username');
};

setstatus = function(stat, subscr, iserror) {
  var elem, html;
  if (typeof subscr !== 'string') {
    iserror = subscr;
    subscr = '';
  }
  elem = $('#connstatus');
  html = stat + '<br><small>' + subscr + '</small>';
  elem.html(html);
  if (iserror) {
    return elem.addClass('error');
  } else {
    return elem.removeClass('error');
  }
};

checkPass = function() {
  var pass1, pass2, registerbutton;
  pass1 = $('#password').val();
  pass2 = $('#password2').val();
  registerbutton = $('#btn');
  if (pass1 === pass2) {
    registerbutton.prop('disabled', false);
    $('#password2').removeClass('badpass');
    return $('#password2').addClass('goodpass');
  } else {
    registerbutton.prop('disabled', true);
    $('#password2').removeClass('goodpass');
    return $('#password2').addClass('badpass');
  }
};

safe = function(callback) {
  var err, error;
  try {
    return callback();
  } catch (error) {
    err = error;
    console.log(err);
    return setstatus(err.message, true);
  }
};

escapeRegex = function(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
};

parseMessage = function(html) {
  var emoji, emojis, i, len, link, name, ref;
  emojis = {
    ':)': "http://emojione.com/wp-content/uploads/assets/emojis/1f603.svg",
    ':unicorn:': "http://emojione.com/wp-content/uploads/assets/emojis/1f984.svg"
  };
  ref = ['20%sadder', 'adrianyouhappynow', 'AJscared', 'bigmac', 'cadance', 'colgatehappy', 'eyeroll', 'fabulous', 'facehoof', 'greed', 'hero', 'laugh', 'lie', 'lyraexcited', 'lyrasad', 'NM2', 'NM3', 'notamused', 'photofinish', 'ppsmile', 'pwink', 'RDhuh', 'rdsmile', 'rdwink', 'scared', 'science', 'seriousTS', 'shiny', 'shrug', 'somethingwentwrong', 'spikemov', 'spike', 'squee', 'sweetie', 'thisisabrushie', 'thorg', 'trixie', 'tssmile', 'twiblush', 'umad', 'vinyl', 'XTUXSmiley', 'yay', 'YEAH'];
  for (i = 0, len = ref.length; i < len; i++) {
    name = ref[i];
    emojis[":" + name + ":"] = "/images/" + name + ".png";
  }
  for (emoji in emojis) {
    link = emojis[emoji];
    html = html.replace(new RegExp(escapeRegex(emoji), 'gi'), "<img alt='" + emoji + "' src='" + link + "'>");
  }
  return html;
};

init = function() {
  return safe(function() {
    var username;
    socket = io.connect();
    socket.on('connect', function() {
      return setstatus('Connected to the server!');
    });
    socket.on('setid', function(data) {
      return sessionid = data.sessionid;
    });
    socket.on('disconnect', function() {
      return setstatus('Lost connection!', true);
    });
    $('.loginform').keydown(function(event) {
      if (event.keyCode === 13) {
        event.preventDefault();
        return $('#btn').click();
      }
    });
    socket.on('login-complete', function(data) {
      setUsernameCookie(data.username);
      setstatus("Welcome " + data.username + "!", 'Loading chat...');
      return initchat();
    });
    socket.on('login-failed', function(data) {
      return setstatus('Failed to login:', data.error, true);
    });
    socket.on('register-complete', function(data) {
      return setstatus("Username '" + data.username + "' has been successfully registered");
    });
    socket.on('register-failed', function(data) {
      return setstatus('Failed to register', data.error, true);
    });
    username = getUsernameCookie();
    if (username !== void 0) {
      return $('#username').val(username);
    }
  });
};

initchat = function() {
  return safe(function() {
    socket.on('disconnect', function() {
      if ($('#msgbox') == null) {
        return alert('Disconnected from server!');
      }
    });
    socket.on('chat-data', function(data) {
      var html;
      html = data.html;
      $('body').html(html);
      socket.on('disconnect', function() {
        var msgbox;
        msgbox = $('#msgbox');
        msgbox.hide();
        if ($('#refreshlink')[0] === void 0) {
          msgbox.parent().append("<span id=\"refreshlink\" class=\"error\">Lost connection\n<a href style=\"display: none;\" onclick=\"location.href=location.href\"> Try refreshing?</a></span>");
        }
        socket.on('connect', function() {
          return $('#refreshlink a').show();
        });
        return socket.on('disconnect', function() {
          return $('#refreshlink a').hide();
        });
      });
      $('#msgbox').keydown(function(event) {
        var message;
        if (event.keyCode === 13) {
          event.preventDefault();
          message = $('#msgbox').val();
          $('#msgbox').val('');
          return socket.emit('client-send-message', {
            sessionid: sessionid,
            message: message
          });
        }
      });
      return socket.on('client-receive-message', function(data) {
        var message, user;
        user = data.user;
        message = data.message;
        html = "<p class='chat-message " + user.type + "'>";
        if (user.name !== "SERVER") {
          html += "<span class='user'>" + user.name + ": </span>";
        }
        html += (parseMessage(message)) + "</p>";
        return $('#chatbox').html(html + $('#chatbox').html());
      });
    });
    return socket.emit('get-chat-data', {});
  });
};

login = function() {
  return safe(function() {
    var password, username;
    username = $('#username').val();
    password = $('#password').val();
    return socket.emit('login', {
      username: username,
      password: password
    });
  });
};

register = function() {
  return safe(function() {
    var password, username;
    username = $('#username').val();
    password = $('#password').val();
    return socket.emit('register', {
      username: username,
      password: password
    });
  });
};

logout = function() {
  return location.href += '';
};
